{"ast":null,"code":"var _jsxFileName = \"/home/kelvin/carrinho-de-compras/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async productId => {\n    try {\n      const productIndex = cart.findIndex(product => product.id === productId);\n\n      if (productIndex >= 0) {\n        const amount = cart[productIndex].amount + 1;\n        updateProductAmount({\n          productId,\n          amount\n        });\n        return;\n      }\n\n      const product = await api.get(`/products/${productId}`).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(\"product does not exist\");\n      });\n      product.amount = 1;\n      await api.get(`stock/${productId}`).then(response => {\n        const productStock = response.data;\n\n        if (productStock.amount < product.amount) {\n          throw new Error(\"out of stock\");\n        }\n      });\n      const newCart = [...cart, product];\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n    } catch (error) {\n      switch (error.message) {\n        case \"out of stock\":\n          toast.error(\"Quantidade solicitada fora de estoque\");\n          break;\n\n        case \"product does not exist\":\n          toast.error('Erro na adição do produto');\n          break;\n\n        default:\n          toast.error(\"Erro\");\n          break;\n      }\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const productIndex = cart.findIndex(product => product.id === productId);\n      if (productIndex < 0) throw new Error(\"product does not exist\");\n      const newCart = cart.filter(product => product.id !== productId);\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n    } catch (error) {\n      switch (error.message) {\n        case \"product does not exist\":\n          toast.error('Erro na remoção do produto');\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      if (amount <= 0) return;\n      const productStock = await api.get(`stock/${productId}`).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(\"product does not exist\");\n      });\n\n      if (productStock.amount < amount) {\n        throw new Error(\"out of stock\");\n      }\n\n      const newCart = cart.map(product => {\n        if (product.id === productId) product.amount = amount;\n        return product;\n      });\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n    } catch (error) {\n      switch (error.message) {\n        case \"out of stock\":\n          toast.error(\"Quantidade solicitada fora de estoque\");\n          break;\n\n        case \"product does not exist\":\n          toast.error('Erro na alteração de quantidade do produto');\n          break;\n\n        default:\n          toast.error(\"Erro\");\n          break;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"gFIzIz84m3VVMDhgC0roSC/BZ4w=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/kelvin/carrinho-de-compras/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","productIndex","findIndex","product","id","amount","updateProductAmount","get","then","response","data","catch","error","Error","productStock","newCart","setItem","stringify","message","removeProduct","filter","map","useCart","context"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  const addProduct = async (productId: number) => {\n    try {\n      const productIndex = cart.findIndex(product => product.id === productId);\n\n      if(productIndex >= 0) {\n        const amount = cart[productIndex].amount + 1;\n        updateProductAmount({productId, amount});\n        return;\n      }\n\n      const product: Product = await api.get(`/products/${productId}`).then((response) => {\n        return response.data\n      }).catch((error) => {\n        throw new Error(\"product does not exist\")\n      });\n\n      product.amount = 1;\n\n      await api.get(`stock/${productId}`).then((response) => {\n        const productStock: Stock = response.data;\n\n        if(productStock.amount < product.amount) {\n          throw new Error(\"out of stock\")\n        }\n      });\n\n      const newCart = [...cart, product];\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n\n    } catch(error) {\n      switch (error.message) {\n        case \"out of stock\":\n          toast.error(\"Quantidade solicitada fora de estoque\");\n          break;\n        \n        case \"product does not exist\":\n          toast.error('Erro na adição do produto');\n          break;\n\n        default:\n          toast.error(\"Erro\");\n          break;\n      }\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      const productIndex = cart.findIndex(product => product.id === productId);\n      if(productIndex < 0) throw new Error(\"product does not exist\")\n\n      const newCart = cart.filter(product => product.id !== productId);\n\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n    } catch(error) {\n      switch (error.message) {\n        case \"product does not exist\":\n          toast.error('Erro na remoção do produto');\n          break;\n      \n        default:\n          break;\n      }\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      if(amount <= 0) return;\n\n      const productStock = await api.get(`stock/${productId}`).then((response) => {\n        return response.data;\n      }).catch((error) => {\n        throw new Error(\"product does not exist\")\n      });\n\n      if(productStock.amount < amount) {\n        throw new Error(\"out of stock\")\n      }\n\n      const newCart = cart.map(product => {\n        if(product.id === productId) product.amount = amount;\n        return product;\n      })\n\n      setCart(newCart);\n      localStorage.setItem('@RocketShoes:cart', JSON.stringify(newCart));\n\n    } catch(error) {\n      switch (error.message) {\n        case \"out of stock\":\n          toast.error(\"Quantidade solicitada fora de estoque\");\n          break;\n        \n        case \"product does not exist\":\n          toast.error('Erro na alteração de quantidade do produto');\n          break;\n      \n        default:\n          toast.error(\"Erro\");\n          break;\n      }\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}